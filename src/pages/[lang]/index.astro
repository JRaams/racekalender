---
import { Icon } from 'astro-icon/components';
import TimeDistance from '~/components/TimeDistance.svelte';
import { languages, type Language } from '~/i18n/ui';
import { useTranslations } from '~/i18n/utils';
import Layout from '~/layouts/Layout.astro';
import { TypeToIconMap } from '~/types/eventtype';
import { CreateGroupedRaceRows } from '~/utils/racegrouper';

const params = Astro.params;
const lang = params.lang as Language;
const t = useTranslations(lang);
const races = CreateGroupedRaceRows(lang);

export function getStaticPaths() {
  return Object.keys(languages).map((x) => ({ params: { lang: x } }));
}
---

<script>
  import dayjs from 'dayjs';

  import isoWeek from 'dayjs/plugin/isoWeek';
  dayjs.extend(isoWeek);

  window.addEventListener('DOMContentLoaded', () => {
    let nextWeekNumber: number | undefined;
    const now = new Date();
    // const now = new Date(1711240000000);
    // const now = new Date(1713288700000);

    document.querySelectorAll('.race-week-row').forEach((tr) => {
      const timestamp = Number(tr.getAttribute('data-timestamp'));
      const date = dayjs(timestamp);

      if (date.isBefore(now, 'days')) {
        tr.classList.add('past');
        tr.classList.add('strikethrough');
      }

      const weekNumber = date.isoWeek();
      const currentWeek = dayjs().isoWeek();
      if (weekNumber === currentWeek) {
        tr.classList.add('current');
        tr.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });

    document.querySelectorAll('.race-list-row').forEach((tr) => {
      const timestamp = Number(tr.getAttribute('data-timestamp'));
      const date = dayjs(timestamp);
      const weekNumber = date.isoWeek();

      if (date.isBefore(now, 'days')) {
        tr.classList.add('past');
        return;
      }

      nextWeekNumber ??= weekNumber;
      if (nextWeekNumber === weekNumber) {
        tr.classList.add('current');
      }
    });
  });
</script>

<Layout title={t('nav.title')}>
  <div class="overflow-auto">
    <table>
      <thead>
        <tr>
          <th scope="col"></th>
          <th scope="col">{t('list.table.name')}</th>
          <th scope="col">{t('list.table.date')}</th>
          <th scope="col">{t('list.table.circuit')}</th>
        </tr>
      </thead>
      <tbody>
        {
          Object.entries(races).map(([week, races]) => (
            <>
              <tr class="race-week-row" data-timestamp={races.at(-1)?.date}>
                <td colspan="1000">Week {week}</td>
              </tr>

              {races.map((race) => (
                <tr class="race-list-row" data-timestamp={race.date}>
                  <td>{race.kind}</td>
                  <td data-col={t('list.table.name')}>
                    <div class="name-cell">
                      {race.name}

                      {race.type === 'race' && (
                        <small>
                          <Icon name={TypeToIconMap[race.type]} size={16} />
                          Race
                        </small>
                      )}

                      {race.type === 'sprint' && (
                        <small>
                          <Icon name={TypeToIconMap[race.type]} size={16} />
                          Sprint
                        </small>
                      )}

                      {race.type === 'superpole_race' && (
                        <small>
                          <Icon name={TypeToIconMap[race.type]} size={16} />
                          Superpole
                        </small>
                      )}
                    </div>
                  </td>
                  <td class="date-cell" data-col={t('list.table.date')}>
                    <TimeDistance client:only="svelte" timestamp={race.date} lang={lang} />
                  </td>
                  <td data-col={t('list.table.circuit')}>
                    <div class="flex-row">
                      {<Icon name={'flagpack:' + race.circuit.countryCode.toLowerCase()} size={32} />}
                      <div class="flex-col">
                        <span class="no-wrap">{race.circuit.name}</span>
                        <small>
                          {race.circuit.city}, {t(('country.' + race.circuit.countryCode) as any)}
                        </small>
                      </div>
                    </div>
                  </td>
                </tr>
              ))}
            </>
          ))
        }
      </tbody>
    </table>
  </div>
</Layout>

<style>
  table {
    font-size: 16px;
  }

  .race-week-row {
    --pico-background-color: var(--pico-code-background-color);
  }
  .race-week-row.current {
    --pico-background-color: var(--pico-primary-background);
    --pico-color: #fff;
  }

  .no-wrap {
    white-space: nowrap;
  }
  tr.past {
    filter: opacity(0.5);
  }
  tr.current {
    --pico-background-color: color-mix(in srgb, var(--pico-primary-background), transparent 80%);
    /* --pico-background-color: #346cdb3b; */
  }

  .name-cell {
    display: flex;
    flex-direction: column;
  }
  .name-cell small {
    display: flex;
    align-items: center;
    gap: 0.25em;
  }

  .date-cell {
    min-width: 250px;
    min-height: 46px;
  }

  .flex-row {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.75em;
  }

  .flex-col {
    display: flex;
    flex-direction: column;
  }

  svg {
    filter: drop-shadow(0px 0px 1px rgba(0, 0, 0, 0.25));
  }

  @media screen and (width < 1400px) {
    /* :global(.container) {
      max-width: 90%;
    } */

    table {
      font-size: 14px;
    }
  }

  @media screen and (max-width: 1100px) {
    table {
      thead {
        display: none;
      }
    }

    tbody {
      tr {
        display: flex;
        flex-direction: column;
        margin-bottom: 1em;
        border-radius: 4px;
        border: 2px solid var(--pico-contrast-focus);

        td[data-col] {
          display: grid;
          grid-template-columns: 70px 1fr;
          place-items: center start;

          &:last-child {
            border-bottom: none;
          }

          &::before {
            content: attr(data-col);
            font-weight: bold;
          }
        }
      }
    }
  }
</style>
