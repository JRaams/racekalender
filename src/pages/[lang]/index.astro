---
import { Icon } from 'astro-icon/components';
import { languages, type Language } from '~/i18n/ui';
import { useTranslations } from '~/i18n/utils';
import Layout from '~/layouts/Layout.astro';
import { TypeToIconMap, TypeToNameMap } from '~/types/eventtype';
import { CreateGroupedRaceRows } from '~/utils/racegrouper';
import dayjs from 'dayjs';
import 'dayjs/locale/nl';
import relativeTime from 'dayjs/plugin/relativeTime';
import dayOfYear from 'dayjs/plugin/dayOfYear';
import { KindToLabelMap } from '~/types';

const params = Astro.params;
const lang = params.lang as Language;

dayjs.extend(relativeTime);
dayjs.extend(dayOfYear);
dayjs.locale(lang);

const t = useTranslations(lang);
const raceWeeks = CreateGroupedRaceRows(lang);

export function getStaticPaths() {
  return Object.keys(languages).map((x) => ({ params: { lang: x } }));
}
---

<script>
  import dayjs from 'dayjs';

  import dayOfYear from 'dayjs/plugin/dayOfYear';
  import isoWeek from 'dayjs/plugin/isoWeek';
  dayjs.extend(isoWeek);
  dayjs.extend(dayOfYear);

  const shortFormatter = new Intl.DateTimeFormat('default', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: false,
  });

  window.addEventListener('DOMContentLoaded', () => {
    let nextWeekNumber: number | undefined;
    let nextDayNumber: number | undefined;
    const now = new Date();

    document.querySelectorAll('.week').forEach(($week) => {
      const timestamp = Number($week.getAttribute('data-timestamp'));
      const date = dayjs(timestamp);

      if (date.isBefore(now, 'days')) {
        $week.classList.add('past');

        const $weekNumber = $week.querySelector('.week-number');
        $weekNumber?.classList.add('strikethrough');
        return;
      } else {
        $week.setAttribute('open', '');
      }

      const weekNumber = date.isoWeek();
      if (nextWeekNumber === undefined) {
        nextWeekNumber = weekNumber;
        $week.classList.add('current-week');

        window.scrollTo({
          top: $week.getBoundingClientRect().top + window.scrollY - 50,
          behavior: 'instant',
        });
      }
    });

    document.querySelectorAll('.day').forEach(($day) => {
      const timestamp = Number($day.getAttribute('data-timestamp'));
      const date = dayjs(timestamp);

      const weekNumber = date.isoWeek();
      if (nextWeekNumber === weekNumber) {
        $day.classList.add('current-week');
      }

      if (date.isBefore(now, 'days')) {
        $day.classList.add('past');
        $day.classList.add('strikethrough');
        return;
      }

      const dayNumber = date.dayOfYear();
      if (nextDayNumber === undefined) {
        nextDayNumber = dayNumber;
        $day.classList.add('current-day');
      }
    });

    document.querySelectorAll('.timestamp-short').forEach(($timestamp) => {
      const time = Number($timestamp.getAttribute('data-timestamp'));
      if (!time || isNaN(time)) return;
      $timestamp.innerHTML = shortFormatter.format(time);
    });
  });
</script>

<Layout title={t('nav.title')}>
  {
    Object.entries(raceWeeks).map(([weekNumber, week]) => (
      <details class="week" data-timestamp={week.lastRaceDate}>
        <summary>
          <strong class="week-number">Week {weekNumber}</strong>
        </summary>

        {Object.values(week.days).map((day) => (
          <>
            <div class="day" data-timestamp={day.timeStamp}>
              {dayjs(day.timeStamp).format('dddd DD MMMM')}
            </div>

            {day.races.map((race) => (
              <div class="race" data-timestamp={race.date}>
                <div>
                  <strong class="title">
                    <span class="timestamp-short" data-timestamp={race.date}>
                      --:--
                    </span>
                    {KindToLabelMap[race.kind]}
                    <Icon name={TypeToIconMap[race.type]} size={16} />
                    {TypeToNameMap[race.type]}
                  </strong>

                  <a class="name" href={`${race.kind}?r=${race.round}`}>
                    <span>{race.name}</span>
                  </a>
                </div>

                <a
                  class="mobile"
                  href="#!"
                  data-name={race.circuit.name}
                  data-city={race.circuit.city}
                  data-country={t(('country.' + race.circuit.countryCode) as any)}
                  data-tooltip=""
                  data-placement="left"
                >
                  <Icon class="country-flag" name={'flagpack:' + race.circuit.countryCode.toLowerCase()} size={24} />
                </a>

                <div class="circuit desktop">
                  <div>
                    <span class="no-wrap">{race.circuit.name}</span>

                    <small>
                      {race.circuit.city}, {t(('country.' + race.circuit.countryCode) as any)}
                    </small>
                  </div>

                  <Icon class="country-flag" name={'flagpack:' + race.circuit.countryCode.toLowerCase()} size={24} />
                </div>
              </div>
            ))}
          </>
        ))}
      </details>
    ))
  }
</Layout>

<style>
  .week {
    border-left: 10px solid var(--pico-code-background-color);
    border-right: 1px solid var(--pico-code-background-color);

    summary {
      background: var(--pico-code-background-color);
      padding: 1em;
      margin-bottom: 0;
    }
  }
  .current-week {
    border-left-color: var(--pico-primary-background);

    summary {
      background: var(--pico-primary-background);

      .week-number {
        color: white;
      }
    }
  }

  .day {
    font-size: 0.9em;
    padding: 1em;
    border-bottom: 1px solid var(--pico-code-background-color);
    background-color: rgb(from var(--pico-code-background-color) r g b / 50%);
  }

  .race {
    display: grid;
    grid-template-columns: 1fr 24px;
    justify-content: space-between;
    align-items: center;
    gap: 1em;
    font-size: 0.8em;
    padding: 1em;
    border-bottom: 1px solid var(--pico-code-background-color);

    .title {
      display: flex;
      flex-wrap: wrap;
      gap: 0 0.5em;
      align-items: center;
    }

    .name {
      padding-block: 1em;
    }
  }

  [data-tooltip]::before {
    display: block;
    content: attr(data-name) '\A' attr(data-city) ', ' attr(data-country);
    white-space: pre;
  }

  .circuit {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 1em;
    text-align: right;

    > div {
      display: flex;
      flex-direction: column;
    }
  }

  .desktop {
    display: none;
  }

  @media screen and (width >= 300px) {
    .race {
      > div {
        margin-left: 1em;
      }
    }
  }

  @media screen and (width >= 768px) {
    .mobile {
      display: none;
    }
    .desktop {
      display: flex;
    }

    .race {
      grid-template-columns: 1fr 1fr;
    }

    .country-flag {
      width: 32px;
      height: 32px;
    }
  }

  @media screen and (width >= 1024px) {
    .country-flag {
      width: 48px;
      height: 48px;
    }
  }
</style>
