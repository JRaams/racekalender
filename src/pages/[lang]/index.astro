---
import { Icon } from 'astro-icon/components';
import TimeDistance from '~/components/TimeDistance.svelte';
import { languages, type Language } from '~/i18n/ui';
import { useTranslations } from '~/i18n/utils';
import Layout from '~/layouts/Layout.astro';
import f1 from '~/static/2024/f1.json';
import superbike from '~/static/2024/superbike.json';
import motogp from '~/static/2024/motogp.json';
import type { RaceRow } from '~/types';
import { TypeToIconMap } from '~/types/eventtype';

const params = Astro.params;
const lang = params.lang as Language;
const t = useTranslations(lang);

const races: RaceRow[] = [];

f1.forEach((raceWeek) => {
  raceWeek.events.forEach((event) => {
    if (event.type !== 'race' && event.type !== 'sprint') return;
    races.push({
      kind: 'F1',
      name: raceWeek.name.replace(/^formula 1/i, '').replace(/ \d+$/, ''),
      date: event.startAt,
      circuit: {
        name: raceWeek.circuit.name,
        city: raceWeek.circuit.city,
        countryCode: raceWeek.circuit.countryCode,
        country: t(`country.${raceWeek.circuit.countryCode}` as any),
      },
      type: event.type,
    });
  });
});

motogp.forEach((raceWeek) => {
  raceWeek.events.forEach((event) => {
    if (event.type !== 'sprint' && event.type !== 'race') return;
    races.push({
      kind: 'MotoGP',
      name: raceWeek.name,
      date: event.startAt,
      circuit: {
        name: raceWeek.circuit.name,
        city: raceWeek.circuit.city,
        countryCode: raceWeek.circuit.countryCode,
        country: t(`country.${raceWeek.circuit.countryCode}` as any),
      },
      type: event.type,
    });
  });
});

superbike.forEach((raceWeek) => {
  raceWeek.events.forEach((event) => {
    if (event.type !== 'superpole_race' && event.type !== 'race') return;

    races.push({
      kind: 'SBK',
      name: raceWeek.name,
      date: event.startAt,
      circuit: {
        name: raceWeek.circuit.name,
        city: raceWeek.circuit.city,
        countryCode: raceWeek.circuit.countryCode,
        country: t(`country.${raceWeek.circuit.countryCode}` as any),
      },
      type: event.type,
    });
  });
});

races.sort((a, b) => a.date - b.date);

export function getStaticPaths() {
  return Object.keys(languages).map((x) => ({ params: { lang: x } }));
}
---

<script>
  import dayjs from 'dayjs';

  import isoWeek from 'dayjs/plugin/isoWeek';
  import weekOfYear from 'dayjs/plugin/weekOfYear';
  dayjs.extend(weekOfYear);
  dayjs.extend(isoWeek);

  window.addEventListener('DOMContentLoaded', () => {
    let nextWeekNumber: number | undefined;
    let foundScrollTarget = false;
    const now = new Date();
    // const now = new Date(1711240000000);
    // const now = new Date(1713288700000);

    document.querySelectorAll('.race-list-row').forEach((tr) => {
      const timestamp = Number(tr.getAttribute('data-timestamp'));
      const date = dayjs(timestamp);
      const weekNumber = date.isoWeek();

      if (date.isBefore(now, 'days')) {
        tr.classList.add('past');
        return;
      }

      nextWeekNumber ??= weekNumber;

      if (weekNumber !== nextWeekNumber) return;
      tr.classList.add('current');

      if (date.isAfter(now) && !foundScrollTarget) {
        foundScrollTarget = true;
        tr.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });
</script>

<Layout title={t('nav.title')}>
  <div class="overflow-auto">
    <table>
      <thead>
        <tr>
          <th scope="col"></th>
          <th scope="col">{t('list.table.name')}</th>
          <th scope="col">{t('list.table.date')}</th>
          <th scope="col">{t('list.table.circuit')}</th>
        </tr>
      </thead>
      <tbody>
        {
          races.map((race) => (
            <tr class="race-list-row" data-timestamp={race.date}>
              <td>{race.kind}</td>
              <td data-col={t('list.table.name')}>
                <div class="name-cell">
                  {race.name}

                  {race.type === 'race' && (
                    <small>
                      <Icon name={TypeToIconMap[race.type]} size={16} />
                      Race
                    </small>
                  )}

                  {race.type === 'sprint' && (
                    <small>
                      <Icon name={TypeToIconMap[race.type]} size={16} />
                      Sprint
                    </small>
                  )}

                  {race.type === 'superpole_race' && (
                    <small>
                      <Icon name={TypeToIconMap[race.type]} size={16} />
                      Superpole
                    </small>
                  )}
                </div>
              </td>
              <td class="date-cell" data-col={t('list.table.date')}>
                <TimeDistance client:only="svelte" timestamp={race.date} lang={lang} />
              </td>
              <td data-col={t('list.table.circuit')}>
                <div class="flex-row">
                  {<Icon name={'flagpack:' + race.circuit.countryCode.toLowerCase()} size={32} />}
                  <div class="flex-col">
                    <span class="no-wrap">{race.circuit.name}</span>
                    <small>
                      {race.circuit.city}, {t(('country.' + race.circuit.countryCode) as any)}
                    </small>
                  </div>
                </div>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
</Layout>

<style>
  table {
    font-size: 16px;
  }

  .no-wrap {
    white-space: nowrap;
  }
  tr.past {
    filter: opacity(0.33);
  }
  tr.current {
    --pico-background-color: var(--pico-primary-background);
    --pico-color: var(--pico-color-light);
  }
  tr.current:hover {
    --pico-background-color: var(--pico-primary-hover-background);
  }

  .name-cell {
    display: flex;
    flex-direction: column;
  }
  .name-cell small {
    display: flex;
    align-items: center;
    gap: 0.25em;
  }

  .date-cell {
    min-width: 250px;
    min-height: 46px;
  }

  .flex-row {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.75em;
  }

  .flex-col {
    display: flex;
    flex-direction: column;
  }

  svg {
    filter: drop-shadow(0px 0px 1px rgba(0, 0, 0, 0.25));
  }

  @media screen and (width < 1400px) {
    :global(.container) {
      max-width: 90%;
    }

    table {
      font-size: 14px;
    }
  }

  @media screen and (max-width: 1100px) {
    table {
      thead {
        display: none;
      }
    }

    tbody {
      tr {
        display: flex;
        flex-direction: column;
        margin-bottom: 1em;
        border-radius: 4px;
        border: 2px solid var(--pico-contrast-focus);

        td[data-col] {
          display: grid;
          grid-template-columns: 70px 1fr;
          place-items: center start;

          &:last-child {
            border-bottom: none;
          }

          &::before {
            content: attr(data-col);
            font-weight: bold;
          }
        }
      }
    }
  }
</style>
