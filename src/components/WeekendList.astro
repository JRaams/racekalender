---
import { Icon } from 'astro-icon/components';
import type { RaceWeek } from '~/types';
import { useTranslations } from '../i18n/utils';
import WeekendListDetails from './WeekendListDetails.astro';
import dayjs from 'dayjs';
import type { Language } from '~/i18n/ui';

type Props = {
  raceWeeks: RaceWeek[];
};

const { raceWeeks } = Astro.props;

const params = Astro.params;
const lang = params.lang as Language;
const t = useTranslations(lang);

function getDayStart(raceWeek: RaceWeek) {
  const firstRace = raceWeek.events.at(0)?.startAt;
  if (firstRace === undefined) return null;
  return dayjs(firstRace).set('hours', 0).set('minutes', 0).set('seconds', 0).unix();
}
function getDayEnd(raceWeek: RaceWeek) {
  const lastRace = raceWeek.events.at(-1)?.startAt;
  if (lastRace === undefined) return null;
  return dayjs(lastRace).set('hours', 23).set('minutes', 59).set('seconds', 59).unix();
}
---

<script is:inline define:vars={{ lang }}>
  document.addEventListener('DOMContentLoaded', () => {
    const details = document.querySelectorAll('.weekend-list details');
    const today = new Date().getTime() / 1000;

    const urlSearchParams = new URLSearchParams(window.location.search);
    const params = Object.fromEntries(urlSearchParams.entries());
    const queryRound = params.r ? details[Number(params.r) - 1] : undefined;

    if (queryRound) {
      setTimeout(() => {
        queryRound.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, 1);
      queryRound.setAttribute('open', '');
    }

    for (let i = 0; i < details.length; i++) {
      const d = details[i];

      const start = Number(d.getAttribute('data-day-start'));
      const end = Number(d.getAttribute('data-day-end'));

      if (today > end) {
        d.classList.add('past');
        continue;
      }

      const summary = d.querySelector('summary');
      if (summary) {
        if (start <= today && today <= end) {
          summary.classList.remove('outline');
        }
        summary.classList.remove('secondary');
        summary.classList.add('primary');
      }

      if (queryRound === undefined) {
        d.scrollIntoView({ behavior: 'smooth', block: 'center' });
        d.setAttribute('open', '');
      }
      break;
    }

    const longFormatter = new Intl.DateTimeFormat(lang, {
      weekday: 'short',
      day: '2-digit',
      month: 'long',
      hour: '2-digit',
      minute: '2-digit',
    });

    document.querySelectorAll('.timestamp-full').forEach(($timestamp) => {
      const time = Number($timestamp.getAttribute('data-timestamp'));
      if (!time || isNaN(time)) return;
      $timestamp.innerHTML = longFormatter.format(time);
    });
  });
</script>

<div class="weekend-list">
  {
    raceWeeks.map((raceWeek) => (
      <details data-day-start={getDayStart(raceWeek)} data-day-end={getDayEnd(raceWeek)}>
        <summary role="button" class="secondary outline">
          <h5>
            {raceWeek.round}. {raceWeek.name.replace('FORMULA 1', '').replace(' 2024', '')}
          </h5>

          <div class="summary-subtitle">
            {<Icon name={'flagpack:' + raceWeek.circuit.countryCode.toLowerCase()} size={32} />}
            <div>
              <span>{raceWeek.circuit.name}</span>
              <small>
                {raceWeek.circuit.city},{raceWeek.circuit.region && ` ${raceWeek.circuit.region}, `}
                {t(`country.${raceWeek.circuit.countryCode}` as any)}
              </small>
            </div>
          </div>
        </summary>

        <div class="details-wrapper">
          <WeekendListDetails {raceWeek} />
        </div>
      </details>
    ))
  }
</div>

<style>
  .weekend-list {
    max-width: 800px;
    margin: 0 auto;
  }

  summary {
    position: relative;
    --pico-h5-color: var(--pico-color);
  }

  summary h5 {
    margin-bottom: 0.5em;
  }

  summary::after {
    position: absolute;
    top: var(--pico-form-element-spacing-vertical);
    right: var(--pico-form-element-spacing-horizontal);
  }

  details.past {
    filter: opacity(0.5);
  }

  .summary-subtitle {
    display: flex;
    align-items: center;
    gap: 0.5em;
  }

  .summary-subtitle > div {
    display: flex;
    flex-direction: column;
  }

  .details-wrapper {
    margin-bottom: 2em;
  }
</style>
